[versions]
### plugins-versions ###
## SPRING
# BOOT
spring-boot-version = "3.2.0"

# WEB
spring-webflux-version = "6.0.7"

# SECURITY
spring-security-core-version = "6.1.0"
spring-security-aouth2-version = "2.5.2.RELEASE"
spring-aouth2-autoconfigure-version = "2.6.8"
spring-authorization-server = "1.0.0"

# CONFIGS
spring-config-server-version = "4.0.4"

spring-aop-version="6.0.13"

# TOOLS
spring-dep-man-version = "1.1.0"
spring-openapi-version = "2.0.4"
spring-gateway-version = "4.0.6"
spring-data-commons-version = "3.0.4"
spring-error-handling-version = "4.1.0"

## DEV TOOLS
dep-managment-version = "2022.0.2"

## DATA
jpa-version = "3.1.0"
jakarta-version = "3.0.2"

# DB_LAYER
flyway-version = "9.16.0"
postgres-version = "42.6.0"
h2-database-version = "2.1.214"

## MICROSERVICES
circuitbreaker-version = "3.0.2"

### MONITORINGS
prometheus-version = "1.10.5"
micrometer-tracing-version = "1.0.0"
resilience4j-micrometer = "2.0.2"
opentelemetry-exporter-zipkin = "1.20.0"

hibernate-version = "6.2.4.Final"
hibernate-validator-version = "8.0.0.Final"

### UTILS
jackson-version = "2.15.2"
guava-version = "31.1-jre"
lombok-version = "1.18.28"
mapstruct-version = "1.5.3.Final"
jetbrains-annotations-version = "24.0.1"
apache-commons-lang3-version = "3.12.0"
apache-commons-validator-version = "1.7"
apache-commons-collections-version = "3.2.2"
commons-io-version = "2.11.0"
swagger-version = "2.2.10"
springfox-version = "2.2.19"
jaxb-version = "2.3.1"

### TEST
aspectj-core-version = "3.24.2"
aspectj-version = "1.9.20.1"

mockito-inline-version = "4.10.0"
testcontainers-version = "1.17.6"
testcontainers-redis-version = "1.6.4"
testcontainers-mongodb-version = "1.17.6"
spring-security-test-version = "6.0.3"

########################################################################################################################

[libraries]
### spring-boot ###
# Зависимость для создания веб-приложений с помощью Spring Boot.
spring-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot-version" }
spring-mail = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref = "spring-boot-version" }
# Зависимость для обеспечения безопасности приложения с помощью Spring Security.
spring-security-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot-version" }
spring-security-core = { module = "org.springframework.security:spring-security-core", version.ref = "spring-security-core-version" }
spring-security-web = { module = "org.springframework.security:spring-security-web", version.ref = "spring-security-core-version" }
spring-security-oauth2 = { module = "org.springframework.security.oauth:spring-security-oauth2", version.ref = "spring-security-aouth2-version" }
spring-security-oauth2autoconfigure = { module = "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure", version.ref = "spring-aouth2-autoconfigure-version" }

# Зависимость для включения функциональности актуатора в Spring Boot.
# startes
spring-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot-version" }
spring-error-handling = { module = "io.github.wimdeblauwe:error-handling-spring-boot-starter", version.ref = "spring-error-handling-version" }
spring-aop-core = { module = "org.springframework:spring-aop", version.ref = "spring-aop-version" }
spring-aop-starter = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "spring-boot-version" }
#spring-aop-starter = { module = "org.springframework:spring-boot-starter-aop", version.ref = "spring-boot-version" }
# Зависимость для использования общих компонентов Spring Data.
spring-data-commons = { module = "org.springframework.data:spring-data-commons", version.ref = "spring-data-commons-version" }
# Зависимость для обработки ошибок в Spring Boot.
# Зависимость для обработки конфигурационных файлов в Spring Boot.
spring-config-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot-version" }
# Зависимость для работы с Redis в Spring Boot.
spring-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "spring-boot-version" }
# Зависимость для работы с MongoDB в Spring Boot.
spring-mongodb = { module = "org.springframework.boot:spring-boot-starter-data-mongodb", version.ref = "spring-boot-version" }
# Зависимость для работы с JPA (Java Persistence API) в Spring Boot.
spring-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot-version" }
# Зависимость для валидации данных в Spring Boot.
spring-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot-version" }

spring-cloud-config-server = { module = "org.springframework.cloud:spring-cloud-config-server", version.ref = "spring-config-server-version" }

jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson-version" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson-version" }

### spring framework ###
# Зависимость для создания реактивных веб-приложений с использованием Spring WebFlux.
spring-webflux = { module = "org.springframework:spring-webflux", version.ref = "spring-webflux-version" }
spring-boot-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot-version" }
spring-boot-plugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "spring-boot-version" }
# Зависимость для создания документации OpenAPI (Swagger) для Spring MVC.
spring-openapi-webmvc = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "spring-openapi-version" }
# Зависимость для создания документации OpenAPI (Swagger) для Spring WebFlux.
spring-openapi-webflux = { module = "org.springdoc:springdoc-openapi-starter-webflux-ui", version.ref = "spring-openapi-version" }

springfox-swagger2 = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "springfox-version"}

### spring cloud ###
# Зависимость для создания API-шлюза с помощью Spring Cloud.
spring-cloud-api-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway", version.ref = "spring-gateway-version" }
# Зависимость для клиента конфигурации Spring Cloud.
spring-cloud-config-client = { module = "org.springframework.cloud:spring-cloud-config-client" }
# Зависимость для использования схемы Circuit Breaker с помощью Spring Cloud и Resilience4j.
spring-cloud-circuitbreaker = { module = "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j", version.ref = "circuitbreaker-version" }
# Зависимость для использования реактивной схемы Circuit Breaker с помощью Spring Cloud и Resilience4j.
spring-cloud-reactive-circuitbreaker = { module = "org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j", version.ref = "circuitbreaker-version" }

### spring oauth2 ###
# Зависимость для создания клиента OAuth2 в Spring Boot.
spring-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client", version.ref = "spring-boot-version" }
# Зависимость для создания сервера ресурсов OAuth2 в Spring Boot.
spring-oauth2-resource-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server", version.ref = "spring-boot-version" }
# Зависимость для создания авторизационного сервера OAuth2 в Spring Security.
spring-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server", version.ref = "spring-authorization-server" }
spring-oauth2-jose = { module = "org.springframework.security:spring-security-oauth2-jose", version.ref = "spring-security-core-version" }

### other ###
# Зависимость для интеграции с Prometheus для мониторинга приложения.
prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "prometheus-version" }
# Зависимость для трассировки с помощью Micrometer.
micrometr-tracing = { module = "io.micrometer:micrometer-tracing", version.ref = "micrometer-tracing-version" }
# Зависимость для управления версиями трассировки Micrometer.
micrometr-tracing-bom = { module = "io.micrometer:micrometer-tracing-bom", version.ref = "micrometer-tracing-version" }
# Зависимость для интеграции Resilience4j с Micrometer.
resilience4j-micrometer = { module = "io.github.resilience4j:resilience4j-micrometer", version.ref = "resilience4j-micrometer" }
# Зависимость для моста трассировки между Micrometer и OpenTelemetry.
micrometr-tracing-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel", version.ref = "micrometer-tracing-version" }
# Зависимость для экспорта данных трассировки в Zipkin с использованием OpenTelemetry.
opentelemetry-exporter-zipkin = { module = "io.opentelemetry:opentelemetry-exporter-zipkin", version.ref = "opentelemetry-exporter-zipkin" }
# Зависимость для инструментов разработки Spring Boot.
spring-devtools = { module = "org.springframework.boot:spring-boot-devtools", version.ref = "spring-boot-version" }

### db-layer ###
# Зависимость для управления миграциями базы данных с помощью Flyway.
flyway = { module = "org.flywaydb:flyway-core", version.ref = "flyway-version" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgres-version" }

hibernate-core = { module = "org.hibernate:hibernate-core", version.ref = "hibernate-version" }
hibernate-validator = { module = "org.hibernate.validator:hibernate-validator", version.ref = "hibernate-validator-version" }

jakarta-jpa = { module = "jakarta.persistence:jakarta.persistence-api", version.ref = "jpa-version" }
jakarta-validation = { module = "jakarta.validation:jakarta.validation-api", version.ref = "jakarta-version" }

### util ###
# Зависимость для использования библиотеки Guava.
guava = { module = "com.google.guava:guava", version.ref = "guava-version" }
# Зависимость для упрощения разработки с помощью аннотаций Lombok.
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok-version" }
# Зависимость для генерации кода преобразования объектов с помощью MapStruct.
mapstruct = { module = "org.mapstruct:mapstruct", version.ref = "mapstruct-version" }
# Зависимость для работы с вводом-выводом в Apache Commons.
commons-io = { module = "commons-io:commons-io", version.ref = "commons-io-version" }
# Зависимость для процессора MapStruct.
mapstruct-processor = { module = "org.mapstruct:mapstruct-processor", version.ref = "mapstruct-version" }
# Зависимость для аннотаций JetBrains.
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations-version" }
# Зависимость для использования Apache Commons Lang3.
apache-commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "apache-commons-lang3-version" }
# Зависимость для валидации данных с использованием Apache Commons Validator.
apache-commons-validator = { module = "commons-validator:commons-validator", version.ref = "apache-commons-validator-version" }
# Зависимость для работы с коллекциями в Apache Commons.
apache-commons-collections = { module = "commons-collections:commons-collections", version.ref = "apache-commons-collections-version" }

swagger-annotation = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger-version" }
jaxb-api = { module = "javax.xml.bind:jaxb-api", version.ref = "jaxb-version" }

### test ###
# Зависимость для использования встроенной базы данных H2 в тестах.
h2-database = { module = "com.h2database:h2", version.ref = "h2-database-version" }
# Зависимость для использования библиотеки AssertJ в тестах.
aspectj-core = { module = "org.assertj:assertj-core", version.ref = "aspectj-core-version" }
aspectj-aop = { module = "org.aspectj:aspectjweaver", version.ref = "aspectj-version" }
# Зависимость для написания тестов в Spring Boot.
spring-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot-version" }
# Зависимость для использования Mockito в тестах.
mockito-inline = { module = "org.mockito:mockito-inline", version.ref = "mockito-inline-version" }
# Зависимость для запуска контейнеров Docker в тестах с использованием Testcontainers и JUnit 5.
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers-version" }
# Зависимость для запуска контейнера Redis в тестах с использованием Testcontainers.
testcontainers-redis = { module = "com.redis.testcontainers:testcontainers-redis", version.ref = "testcontainers-redis-version" }
# Зависимость для запуска контейнера PostgreSQL в тестах с использованием Testcontainers.
spring-security-test = { module = "org.springframework.security:spring-security-test", version.ref = "spring-security-test-version" }
testcontainers-mongodb = { module = "org.testcontainers:mongodb", version.ref = "testcontainers-mongodb-version" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers-version" }

dependency-managment = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "dep-managment-version" }
########################################################################################################################

[plugins]
#jib = { id = "com.google.cloud.tools.jib", version.ref = "jib" }
flyway = { id = "org.flywaydb.flyway", version.ref = "flyway-version" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot-version" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dep-man-version" }
